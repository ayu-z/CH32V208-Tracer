# 宏定义
# add_definitions(-DDEBUG=DEBUG_UART1)

set(SDK_INCLUDE_DIRS
    ${CMAKE_CURRENT_SOURCE_DIR}/Core
    ${CMAKE_CURRENT_SOURCE_DIR}/System
    ${CMAKE_CURRENT_SOURCE_DIR}/Debug
    ${CMAKE_CURRENT_SOURCE_DIR}/Peripheral/inc
)

file(GLOB SDK_PERIPHERAL_SOURCES 
    "${CMAKE_CURRENT_SOURCE_DIR}/Peripheral/src/*.c"
)

file(GLOB SDK_SYSTEM_SOURCES 
    "${CMAKE_CURRENT_SOURCE_DIR}/System/*.c"
)

set(SDK_FREERTOS_INCLUDE_DIRS
    ${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/include
    ${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/portable/GCC/RISC-V
    ${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/portable/GCC/RISC-V/chip_specific_extensions/RV32I_PFIC_no_extensions
)

file(GLOB SDK_FREERTOS_SOURCES
    "${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/portable/GCC/RISC-V/*.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/portable/MemMang/heap_4.c"
    "${CMAKE_CURRENT_SOURCE_DIR}/FreeRTOS/portable/GCC/RISC-V/portASM.S"
)

# Exclude MPU wrappers as they're not used for RISC-V and generate unnecessary warnings
list(FILTER SDK_FREERTOS_SOURCES EXCLUDE REGEX ".*mpu_wrappers.c$")

# 核心SDK源文件
set(SDK_CORE_SOURCES
    ${CMAKE_CURRENT_SOURCE_DIR}/Core/core_riscv.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Debug/debug.c
    ${CMAKE_CURRENT_SOURCE_DIR}/Startup/startup_ch32v20x_D8W.S
    ${SDK_SYSTEM_SOURCES}
    ${SDK_PERIPHERAL_SOURCES}
)

if(BUILD_WITH_BLE)
    set(BLE_INCLUDE_DIRS
        ${CMAKE_CURRENT_SOURCE_DIR}/BLE_LIB
        ${CMAKE_CURRENT_SOURCE_DIR}/HAL/include
    )
    
    file(GLOB BLE_HAL_SOURCES 
        "${CMAKE_CURRENT_SOURCE_DIR}/HAL/*.c"
        "${CMAKE_CURRENT_SOURCE_DIR}/BLE_LIB/*.S"
    )
    
    set(SDK_INCLUDE_DIRS ${BLE_INCLUDE_DIRS} ${SDK_INCLUDE_DIRS})

    list(APPEND SDK_CORE_SOURCES ${BLE_HAL_SOURCES})
    
    # BLE静态库
    set(BLE_STATIC_LIB ${CMAKE_CURRENT_SOURCE_DIR}/BLE_LIB/libwchble.a)
    
    # LWNS库配置 (依赖BLE)
    if(BUILD_WITH_LWNS)
        list(APPEND SDK_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/LWNS)
        set(LWNS_STATIC_LIB ${CMAKE_CURRENT_SOURCE_DIR}/LWNS/LIBWCHLWNS.a)
    endif()
endif()

# NetLib配置
if(BUILD_WITH_NETLIB)
    set(NETLIB_SOURCES
        ${CMAKE_CURRENT_SOURCE_DIR}/NetLib/eth_driver.c
    )
    
    list(APPEND SDK_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/NetLib)
    list(APPEND SDK_CORE_SOURCES ${NETLIB_SOURCES})
    set(NETLIB_STATIC_LIB ${CMAKE_CURRENT_SOURCE_DIR}/NetLib/libwchnet.a)
endif()

if(BUILD_WITH_FREERTOS)
    list(APPEND SDK_INCLUDE_DIRS ${SDK_FREERTOS_INCLUDE_DIRS})
    list(APPEND SDK_CORE_SOURCES ${SDK_FREERTOS_SOURCES})
endif()

set(SDK_CORE_INCLUDE_DIRS ${SDK_INCLUDE_DIRS} PARENT_SCOPE)
set(SDK_CORE_SOURCES ${SDK_CORE_SOURCES} PARENT_SCOPE)
set(SDK_LINKER_SCRIPT ${CMAKE_CURRENT_SOURCE_DIR}/Ld/Link.ld PARENT_SCOPE)

if(BUILD_WITH_BLE)
    set(BLE_STATIC_LIB ${BLE_STATIC_LIB} PARENT_SCOPE)
    if(BUILD_WITH_LWNS)
        set(LWNS_STATIC_LIB ${LWNS_STATIC_LIB} PARENT_SCOPE)
    endif()
endif()

if(BUILD_WITH_NETLIB)
    set(NETLIB_STATIC_LIB ${NETLIB_STATIC_LIB} PARENT_SCOPE)
endif() 
